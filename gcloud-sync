#!/usr/bin/env php
<?php
/**
 * @author    X2Y Dev Team
 * @copyright Copyright (c) X2Y.io, Inc. (https://x2y.io/)
 * @package   XDEV_Utilities
 */

if (PHP_SAPI !== 'cli') {
    echo 'gcloud-sync must be run as a CLI application';
    exit(1);
}

/**
 * Google Cloud Storage Sync
 */
class Sync
{
    // Magento Versions
    const M1_VERSION = 1;
    const M2_VERSION = 2;

    // Magento Configurations
    const M1_CONFIG = 'app/etc/local.xml';
    const M2_CONFIG = 'app/etc/env.php';

    // n98-magerun
    const MAGERUN_EXECUTABLE = [
        1 => 'shell/n98-magerun.phar',
        2 => 'bin/n98-magerun2.phar'
    ];
    const MAGERUN_GET_COMMAND = [
        1 => 'wget https://files.magerun.net/n98-magerun.phar -P shell/',
        2 => 'wget https://files.magerun.net/n98-magerun2.phar -P bin/'
    ];

    // File Sync
    const ASSETS_FILENAME = 'assets.tgz';
    const DATABASE_FILENAME = 'database.sql.bz2';

    // Magento Version
    private $_version;

    // Store Domain
    private $_domain;

    // Database Variables
    private $_hostname;
    private $_username;
    private $_password;
    private $_database;
    private $_table_prefix;

    // Google Cloud Variables
    private $_token;
    private $_bucket;

    /**
     * Sync constructor.
     */
    public function __construct()
    {
        try {
            $this->_initializeMagentoVersion();
            $this->_initializeCredentials();
            $this->_initializeDomain();
        } catch (Exception $exception) {
            echo $exception->getMessage();
            exit(1);
        }
    }

    /**
     * Resource cleanup
     */
    public function __destruct()
    {
        // Remove assets archive
        $filename = self::ASSETS_FILENAME;
        @unlink($filename);

        // Remove database export
        $filename = self::DATABASE_FILENAME;
        @unlink($filename);
    }

    /**
     * Process CLI input
     */
    public function process()
    {
        $options = getopt(
            't:c::a::d::b:'
        );

        if (empty($options)) {
            echo <<< EOT

gcloud-sync is a simple utility that will automatically create a backup of a Magento database, media directory and configuration from a host to Google Cloud Storage.

Get the latest version at https://github.com/X2Y-Development/gcloud-sync
            
Usage:
    -t      Google Account OAuth2 token
    -b      Google Cloud Storage bucket name
    -c      Sync Magento configuration files
    -a      Sync Magento media assets
    -d      Sync Magento database
    
Example:
    php gcloud-sync -c -a -d -t=[OAUTH2_TOKEN] -b=[BUCKET_NAME] 

X2Y Development <dev@x2y.io>


EOT;
            exit(0);
        }

        $token = isset($options['t']) ? $options['t'] : null;
        if (!isset($token)) {
            echo "Please provide a valid oauth2 token.\n";
            exit(1);
        }
        $this->_token = $token;

        $bucket = isset($options['b']) ? $options['b'] : null;
        if (!isset($bucket)) {
            echo "Please provide a valid storage bucket name.\n";
            exit(1);
        }
        $this->_bucket = $bucket;

        // Sync Magento configuration
        if (isset($options['c'])) {
            switch ($this->_version) {
                // Magento 1
                case self::M1_VERSION:
                    $this->_sync(self::M1_CONFIG);
                    break;

                // Magento 2
                case self::M2_VERSION:
                    $this->_sync(self::M2_CONFIG);
                    break;
            }
        }

        // Sync Magento assets
        if (isset($options['a'])) {
            $this->_compressAssets();
            $this->_sync(self::ASSETS_FILENAME);
        }

        // Sync Magento database
        if (isset($options['d'])) {
            $this->_exportDatabase();
            $this->_sync(self::DATABASE_FILENAME);
        }
    }

    /**
     * Initialize Magento version
     *
     * @throws Exception
     */
    private function _initializeMagentoVersion()
    {
        switch (true) {
            // Magento 1
            case file_exists(self::M1_CONFIG):
                $this->_version = self::M1_VERSION;
                break;

            // Magento 2
            case file_exists(self::M2_CONFIG):
                $this->_version = self::M2_VERSION;
                break;

            default:
                throw new Exception('Unable to identify Magento version.');
        }
    }

    /**
     * Initialize database credentials
     *
     * @throws Exception
     */
    private function _initializeCredentials()
    {
        switch ($this->_version) {
            // Magento 1
            case self::M1_VERSION:
                $config = simplexml_load_file(self::M1_CONFIG);

                $this->_hostname = $config->global->resources->default_setup->connection->host->__toString();
                $this->_username = $config->global->resources->default_setup->connection->username->__toString();
                $this->_password = $config->global->resources->default_setup->connection->password->__toString();
                $this->_database = $config->global->resources->default_setup->connection->dbname->__toString();
                $this->_table_prefix = $config->global->resources->db->table_prefix->__toString();
                break;

            // Magento 2
            case self::M2_VERSION:
                $config = include self::M2_CONFIG;

                $this->_hostname = $config['db']['connection']['default']['host'];
                $this->_username = $config['db']['connection']['default']['username'];
                $this->_password = $config['db']['connection']['default']['password'];
                $this->_database = $config['db']['connection']['default']['dbname'];
                $this->_table_prefix = $config['db']['table_prefix'];
                break;

            default:
                throw new Exception('Unable to identify Magento version during credentials initialization.');
        }

        // Initialization check
        if (!isset($this->_hostname) ||
            !isset($this->_username) ||
            !isset($this->_password) ||
            !isset($this->_database)) {

            throw new Exception('Database credentials are invalid. Please check configuration file.');
        }
    }

    /**
     * Initialize domain extraction
     *
     * @throws Exception
     */
    private function _initializeDomain()
    {
        $dsn = "mysql:host={$this->_hostname};dbname={$this->_database}";
        $pdo = new PDO($dsn, $this->_username, $this->_password);

        $configTable = "{$this->_table_prefix}core_config_data";
        
        $statement = $pdo->prepare("SELECT value FROM {$configTable} WHERE path = :path AND scope = :scope AND scope_id = :scope_id");
        $statement->bindValue(':path', 'web/unsecure/base_url', PDO::PARAM_STR);
        $statement->bindValue(':scope', 'default', PDO::PARAM_STR);
        $statement->bindValue(':scope_id', 0, PDO::PARAM_INT);
        $statement->execute();

        $result = $statement->fetch(PDO::FETCH_ASSOC);

        $baseUrl = array_pop($result);
        $url = parse_url($baseUrl);

        $this->_domain = $url['host'];

        if (!isset($this->_domain)) {
            throw new Exception('Unable to extract domain from database.');
        }
    }

    /**
     * Export Database
     */
    private function _exportDatabase()
    {
        $compressedDbName = self::DATABASE_FILENAME;

        echo "Exporting Database\n";
        $mageRun = $this->getMageRunFilePath();

        system("{$mageRun} db:dump --strip=\"@development\" --exclude=\"core_config_data\" --quiet database.sql;");
        system("sed -e 's/DEFINER[ ]*=[ ]*[^*]*\*/\*/' database.sql | bzip2 -c > {$compressedDbName};");
        system("rm database.sql;");
    }

    /**
     * Get n98-magerun file path
     * If no such file, it will be downloaded
     *
     * @return string n98-magerun file path
     */
    private function getMageRunFilePath()
    {
        $mageRun = self::MAGERUN_EXECUTABLE[$this->_version];

        if (!file_exists($mageRun)) {
            echo "Magerun does not exist, downloading...\n";
            system(self::MAGERUN_GET_COMMAND[$this->_version]);
        }

        system("chmod +x {$mageRun}");

        return $mageRun;
    }

    /**
     * Compress Assets
     */
    private function _compressAssets()
    {
        $filename = self::ASSETS_FILENAME;

        switch ($this->_version) {
            // Magento 1
            case self::M1_VERSION:
                echo "Compressing Assets\n";
                echo system("time tar zcf {$filename} media/");
                break;

            // Magento 2
            case self::M2_VERSION:
                echo "Compressing Assets\n";
                echo system("time tar zcf {$filename} pub/media/");
                break;
        }
    }

    /**
     * Sync resources to Google Cloud Storage
     *
     * @param $resource
     */
    private function _sync($resource)
    {
        $filename = explode('/', $resource);
        $filename = array_pop($filename);
        $contentType = mime_content_type($filename);

        $objectName = $this->_domain . '/' . $filename;

        $command = <<< EOT
curl -X POST --upload-file {$resource} \
-H "Authorization: Bearer {$this->_token}" \
-H "Content-Type: {$contentType}" \
"https://www.googleapis.com/upload/storage/v1/b/{$this->_bucket}/o?uploadType=media&name=$objectName"
EOT;
        system($command);
    }
}

$sync = new Sync();
$sync->process();

